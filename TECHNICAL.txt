Islandora prepare ingest: technical

This module provides a way to make workflows that help with preparing data for ingest into an Islandora repository.
In this TECHNICAL file the technical details of the working of this module are described. Read the README for general information about this module or the HOWTO file to learn how to make a new workflow and use it to prepare data for ingest.

This module defines a new hook named hook_workflow_step_info. This new hook defines the steps a workflow can contain. The module itself defines about 22 different steps that can be used to change input data into output data that is suitable for ingest into an Islandora repository. Also there are steps defined to check the output of a workflow.

hook_workflow_step_info returns an array where the keys are the identifiers (textual) of possible steps, and the value is an array with 3 key-values:
 - name: a human readable name for the step;
 - type group: a human readable name for the group of the step, can be an array with multiple names. Current groups are: 'Constants', 'Add items', 'Add key', 'Modify key', 'Files and directories', 'Sorting, filtering and grouping', 'Handling XML', 'Visual' and 'Validation';
 - class name: the name of the class that implements this step.

The class that implements a step must implement the PrepareIngestStepInterface interface and should extend the PrepareIngestStep class.
The following 4 methods must be implemented by the class, the other methods are optional and have default values:

## label()
This method must return a string that is simular to the name of the step, but include the configuration if this is defined.

## arguments()
This method must return an array containing the arguments for this step. The keys are the argument names. The values are an array with the following keys:
  * - 'label': a human readable label for this key;
  * - 'description': optional, further description of the key or its contents;
  * - 'type': the type of the value of this argument. See 'Argument values' for more information;
  * - 'default_value': optional, a default value of type 'type';
  * - 'allow_constants': optional, this value allows constants.
If the step does not need arguments, return an empty array.

## dryRun()
This method must do a dryrun of the actions the step does. This method should manipulate the data, but only in memory, so don't make/change any files/directories (use pifs instead) or do any other "real" things.
The data_cache functions should be used to read the items of the previous step and store the manipulated items (in case the step only changes keys), or the old and new items (in case the step adds new items), or no items at all (e.g. step does validation only).
This method should return FALSE if the dryrun finished successfully, or an array containing one or more entries (something wrong with the run). Each entry is an associated array with keys: text and type, and optionally key. The text key has a value (string) that explains what is wrong with the run. The type key indicates the type of error and can be run_error or validate_error. The optional key key holds the name of the key where the run went wrong.
The prepareIngest method will do the actual writing of files/directories and other "real" things based on the output of this step.

## prepareIngest()


The name of a step is used as the bases of the 2 functions that every step must implement: label_<stepname> and work_<stepname>. The label function gets called with the steps info (described later) array and a configuration array as the second argument. The configuration array can contain the (zero or more) keys of the arguments array of the steps info array. The value associated with the key is the value the end user has configured. The label function should return a string that is used as the step title in the user interface. It is recommended to contain the values of the configuration (if any) in the returned string. When no configuration is present, it should be a short description of the function of the step, where a step that adds items should start with 'Add items', a step that adds key-values to existing items should start with 'Add key' and a step that validates should start with 'Validate'.
The work function also gets called with the steps info array and a configuration array. Also a data array and a context array are passed by reference, so the workfunction can do the work and alter the data array. The context array can be used to keep a context between steps. For example, it is used with the included filter_items and end_filter steps.
The work function of the step should alter the data array in such a way as described by the step info array. The context array can be used and/or altered if needed by the step.
The last argument of the workfunction is the extent. This lets the work function know to what extent the work should be done. The following values of the extent should be handled by the work function:
 - WORK_EXTENT_ONLY_CHECK_INPUT: this only checks if the input keys of the steps is correct. So if the input key of a step is defined in a previous step. Use the check_input_keys_in_data function to check this. Always call the fill_data_for_check_input_keys_if_needed function last in the work function if there are no errors.
 - WORK_EXTENT_ONLY_CHECK_ALL_ARGUMENTS: checks the values of the arguments of a step. This checks the type of the arguments and if they are properly filled. Use the check_arguments function to check this, and if needed do additional checks.
 - WORK_EXTENT_ONLY_DRY_RUN: do the actual work but only virtual. Changes made should only be made in memory. Writing to files should be done via the pifs module (Prepare Ingest File System).
 - WORK_EXTENT_ONLY_DO_ALL: do the actual work.  


The hook_workflow_step_info returns an array that has a value of each key, this is an array containing the following keys:

 - 'arguments': an array containing the arguments for this step. The keys are the argument names. The value is an array with the following keys:
   - 'label': A human readable label for this key
   - 'description': Optional, further description of the key or its contents
   - 'type': The type of the value of this argument. See 'Argument values' for more information.
   - 'default_value': a default value of type 'type'
   - 'allow_constants': this value allows constants

 - 'input keys': an array containing the keys whose values should be present as keys in the data for this step to work.

 - 'input keys callback': the name of a function. This function returns an array containing the keys whose values should be present as keys in the data for this step to work.

 - 'output keys': an array containing the keys whose values are present as keys in the data after this step.

 - 'output keys callback': the name of a function. This function returns an array containing the keys whose values are present as keys in the data after this step.

 - 'changes count': boolean indicating if the step changes the count of the data array. So if items are added or removed from the data array, this should be TRUE.

 - 'changes keys': boolean indicating if the step changes the keys of the items in the data array. So if the items get a new key, this shoud be TRUE.

 - 'changes files': boolean indication if the step adds and/or changes files on the file system.

 - 'visual': an array specifying which visual possibilities this step has:
   - 'groupstart': the start of a visual group.
   - 'groupend': the end of a visual group.
   - 'groupremove': a button to remove all items in a visual group inclusing the group itself and its group end step.
   - 'ungroup': a button to remove the visual group and its accompanying group end, so to ungroup the items in the group.
   - 'nomove': do not display buttons for moving.
   - 'noremove': do not display buttons for removing.
 
 - 'type group': Optional, the (localized) string of the type group. Can be used to group the step with similar steps.


Argument values:
The arguments of a step can have one of the following values:
 - number: a numeric value without fractions
 - string: a textual value. Can contain any value.
 - boolean: a true or false value.
 - template: a special kind of text. Can contain the names of keys, surrounded in curly brackets. These will be replaced. Visualized as a text area.
 - templatestring: same as the template, but visualized as a text field.
 - key: the name of a key, only the following characters are allowed: a-z A-Z 0-9 - _
 - filepath: the path to a directory of file, that exists or not.
 - regexp: a valid regular expression.
 - DOM: an XML DOM
 - xpath: an absolute xpath
 - collection: the identifier of an existing collection
 - namespace: a valid namespace for Islandora objects, without the ending colon

Before programming a new step, check out the existing steps. You can learn how to make a step and also see if the functionality of the step is not covered by an existing step. The functionality of a step should be as general and lean as possible.

