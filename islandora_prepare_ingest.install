<?php

/**
 * @file
 * Installation hooks.
 *
 *
 *  Copyright 2017-2018 Leiden University Library
 *
 *  This file is part of islandora_prepare_ingest.
 *
 *  islandora_prepare_ingest is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * Implements hook_install().
 */
function islandora_prepare_ingest_install() {
  drupal_mkdir('public://islandora_prepare_ingest_import');
}

/**
 * Implements hook_uninstall().
 */
function islandora_prepare_ingest_uninstall() {
  $upload_path = 'public://islandora_prepare_ingest_import';
  $removal_files = file_scan_directory($upload_path, '/(.*)/');

  foreach ($removal_files as $file) {
    @file_delete($file);
  }
  drupal_rmdir($upload_path);
}

/**
 * Implements hook_schema().
 */
function islandora_prepare_ingest_schema() {
  $schema = array();

  $schema['islandora_prepare_ingest_workflow'] = array(
    'description' => 'Holds the prepare ingest workflows.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary key.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The name of the workflow.',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
      ),
      'description' => array(
        'description' => 'The description of the workflow.',
        'type' => 'text',
        'not null' => TRUE,
        'length' => 4000,
      ),
      'type' => array(
        'description' => 'The type of the workflow, active or full or partial.',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 10,
      ),
      'checked' => array(
        'description' => 'If this workflow was checked and approved.',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'id_unique' => array('id'),
    ),
    'indexes' => array(
      'id_index' => array('id'),
    ),
  );  
  $schema['islandora_prepare_ingest_step'] = array(
    'description' => 'Holds one step of a prepare ingest workflow.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary key.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'workflow_id' => array(
        'description' => 'The workflow where this step belongs to.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'step_name' => array(
        'description' => 'The name of the step.',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
      ),
      'step_module' => array(
        'description' => 'The module where the step resides in.',
        'type' => 'text',
        'not null' => TRUE,
        'length' => 4000,
      ),
      'weight' => array(
        'description' => 'The order of the step.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'id_unique' => array('id'),
    ),
    'indexes' => array(
      'id_index' => array('id'),
      'workflow_id_index' => array('workflow_id'),
    ),
    'foreign keys' => array(
      'parent_entry' => array(
        'table' => 'islandora_prepare_ingest_workflow',
        'columns' => array(
          'workflow_id' => 'id',
        ),
      ),
    ),
  );
  $schema['islandora_prepare_ingest_step_config'] = array(
    'description' => 'Holds one configuration field of a step of a prepare ingest workflow.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary key.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'step_id' => array(
        'description' => 'The step where this config belongs to.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'config_key' => array(
        'description' => 'The key of the configuration of the step.',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
      ),
      'config_value' => array(
        'description' => 'The value of the configuration of the step.',
        'type' => 'text',
        'not null' => TRUE,
        'length' => 10000,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'id_unique' => array('id'),
    ),
    'indexes' => array(
      'id_index' => array('id'),
      'step_id_index' => array('step_id'),
    ),
    'foreign keys' => array(
      'parent_entry' => array(
        'table' => 'islandora_prepare_ingest_step',
        'columns' => array(
          'step_id' => 'id',
        ),
      ),
    ),
  );
  $schema['islandora_prepare_ingest_data_cache'] = array(
    'description' => 'Holds the cache for all the data that is generated during a workflow run.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary key.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'workflow_id' => array(
        'description' => 'The cache is about this workflow.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'step_id' => array(
        'description' => 'The cache is about this step.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'other_id' => array(
        'description' => 'Another id to identifiy this cache.',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 100,
      ),
      'item_nr' => array(
        'description' => 'The cache is about this item nr.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'dctimestamp' => array(
        'description' => 'The timestamp for this cache entry.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'dctype' => array(
        'description' => 'The type for this cache entry, is 1 for data and 2 for files.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'dckey' => array(
        'description' => 'The key of the value of the item nr of the step of type.',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 100,
      ),
      'dcvalue' => array(
        'description' => 'The value for the key of the item nr of the step of type.',
        'type' => 'text',
        'not null' => TRUE,
        'length' => 65535,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'id_unique' => array('id'),
    ),
    'indexes' => array(
      'id_index' => array('id'),
      'workflow_id_index' => array('workflow_id'),
      'workflow_step_other_id_type_index' => array('workflow_id', 'step_id', 'other_id', 'dctype'),
      'item_nr_index' => array('item_nr'),
    ),
    'foreign keys' => array(
    ),
  );  

  return $schema;
}

function XXXislandora_prepare_ingest_update_7400() {
  $spec = array(
    'description' => 'The key of the value of the item nr of the step of type.',
    'type' => 'varchar',
    'not null' => TRUE,
    'length' => 100,
  );
  db_add_field('islandora_prepare_ingest_data_cache', 'key', $spec);
}

function XXXislandora_prepare_ingest_update_7401() {
  if (db_field_exists('islandora_prepare_ingest_data_cache', 'timestamp')) {
    $spec = array(
      'description' => 'The timestamp for this cache entry.',
      'type' => 'int',
      'not null' => TRUE,
    );
    db_change_field('islandora_prepare_ingest_data_cache', 'timestamp', 'dctimestamp', $spec);
  }

  if (db_field_exists('islandora_prepare_ingest_data_cache', 'type')) {
    $spec = array(
      'description' => 'The type for this cache entry, is 1 for data and 2 for files.',
      'type' => 'int',
      'not null' => TRUE,
    );
    db_drop_index('islandora_prepare_ingest_data_cache', 'workflow_step_other_id_type_index');
    db_change_field('islandora_prepare_ingest_data_cache', 'type', 'dctype', $spec, array(
      'indexes' => array('workflow_step_other_id_type_index' => array('workflow_id', 'step_id', 'other_id', 'dctype'))
    ));
  }
  $spec = array(
    'description' => 'The key of the value of the item nr of the step of type.',
    'type' => 'varchar',
    'not null' => TRUE,
    'length' => 100,
  );
  if (db_field_exists('islandora_prepare_ingest_data_cache', 'key')) {
    db_change_field('islandora_prepare_ingest_data_cache', 'key', 'dckey', $spec);
  }
  else {
    if (!db_field_exists('islandora_prepare_ingest_data_cache', 'dckey')) {
      db_add_field('islandora_prepare_ingest_data_cache', 'dckey', $spec);
    }
  }

  if (db_field_exists('islandora_prepare_ingest_data_cache', 'value')) {
    $spec = array(
      'description' => 'The value for the key of the item nr of the step of type.',
      'type' => 'text',
      'not null' => TRUE,
      'length' => 65535,
    );
    db_change_field('islandora_prepare_ingest_data_cache', 'value', 'dcvalue', $spec);
  }
}

